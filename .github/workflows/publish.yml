name: Publish Python Package

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Verify version matches tag
      run: |
        TAG=${GITHUB_REF#refs/tags/v}
        PACKAGE_VERSION=$(python -c "import bundestag_protocol_extractor; print(bundestag_protocol_extractor.__version__)")
        if [ "$TAG" != "$PACKAGE_VERSION" ]; then
          echo "Error: Git tag ($TAG) does not match package version ($PACKAGE_VERSION)"
          exit 1
        fi
    - name: Build package
      run: python -m build
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
    - name: Verify package is available
      run: |
        # Wait for package to be available
        sleep 60
        VERSION=$(python -c "import bundestag_protocol_extractor; print(bundestag_protocol_extractor.__version__)")
        # Try to install from PyPI to verify it's available
        pip install bundestag-protocol-extractor==$VERSION
        # Check if installed version matches
        INSTALLED_VERSION=$(pip show bundestag-protocol-extractor | grep "Version:" | cut -d " " -f 2)
        if [ "$VERSION" != "$INSTALLED_VERSION" ]; then
          echo "Error: Expected version $VERSION but got $INSTALLED_VERSION"
          exit 1
        fi